# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. What are the top 10 most popular songs?

SELECT artist_name, track_name
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;

#2. What are the songs that are the most meaningful to listen to and what are the least meaningful songs?

SELECT artist_name, track_name,valence,
CASE WHEN valence <=0.505 THEN 'More meaningful'
WHEN valence >=0.531 THEN 'Less meaningful'
END AS Meaningful_songs
FROM Spotifydata
ORDER BY valence ASC;

#3. What are the top 10 artists who have the most tickets sold to their live shows? Show what the percentage of the audience would be at those shows.

SELECT artist_name, ROUND (liveness * 100,1) AS Audience_percentage
FROM Spotifydata
ORDER BY Audience_percentage DESC
LIMIT 10;

#4. Which songs are the most fun to listen to? Order by top 10. 

SELECT artist_name, track_name, ROUND(danceability,1) AS Dancing_songs,
 ROUND(energy,1) AS energetic_songs, 
 ROUND(tempo,1) AS upbeat_songs
FROM Spotifydata
WHERE danceability >= 0.778 OR energy >= 0.765
OR tempo >= 140.042
ORDER BY danceability DESC
LIMIT 10;



